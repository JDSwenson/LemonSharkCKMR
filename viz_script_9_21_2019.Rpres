Sample Size Simulation Results
========================================================
author: John Swenson
date: 4/1/2019
autosize: true

Set working directory
```{r, echo=FALSE}
#Set working directory to results folder
setwd("~/R/R_working_dir/CKMR/LemonSharkCKMR_GitHub")
list.files()
```

Lethal sampling
```{r, echo=FALSE}
#yrs of study
study_yrs <- 4
#MINIMUM number of individuals in population
n_juv <- 562 #Number of juveniles in dataset from 2004-2007
n_fat <- 63 #Max number of unique fathers in a single year - used as proxy for min number of fathers we should detect
n_mot <- 29 #Max number of unique mothers in a single year - used as a proxy for min number of mothers we should detect
min_adult <- n_fat+n_mot #
total_pop <- n_juv+n_fat+n_mot

##########Lethal sampling##########
#Lemon_77_1 <- read.csv("lethal/apriori_N_77/Lemon_CKMR_loop_N77.csv", header=TRUE, stringsAsFactors = FALSE)
#Lemon_77_1$apriori_est <- 77
#Lemon_77_2 <- read.csv("lethal/apriori_N_77/Lemon_CKMR_loop_2_N77.csv", header=TRUE, stringsAsFactors = FALSE)
#Lemon_77_2$apriori_est <- 77
Lemon_100 <- read.csv(("lethal/apriori_N_100/Lemon_CKMR_loop_aprioriN_100.csv"))
colnames(Lemon_100)[6] <- "Total_samples"
Lemon_500 <- read.csv("lethal/apriori_N_500/Lemon_CKMR_loop_aprioriN_500.csv")
Lemon_500$Estimated_truth <- 500

#Can DELETE below - now included in simulation output
for(i in 1:length(Lemon_500[,1])) Lemon_500$Total_samples[i] <- round(10*sqrt(Lemon_500$Estimated_truth[i]),0)

Lemon_1000 <- read.csv("lethal/apriori_N_1000/Lemon_CKMR_loop_aprioriN_1000.csv")
Lemon_1000$Estimated_truth <- 1000
#Can DELETE below - now included in simulation output
for(i in 1:length(Lemon_1000[,1])) Lemon_1000$Total_samples[i] <- round(10*sqrt(Lemon_1000$Estimated_truth[i]),0)
#head(Lemon_100)

leth_sims <- c()
leth_sims <- rbind(Lemon_100, Lemon_500, Lemon_1000)
leth_sims$perc_sampled <- round(leth_sims$Total_samples/min_adult*100,0)
leth_sims2 <- c(leth_sims$Nf, leth_sims$Nm)
leth_sims_se <- c(leth_sims$NfSE, leth_sims$NmSE)
leth_sims2 <- data.frame(cbind(leth_sims2, leth_sims_se))
leth_sims2$Estimated_truth <- rep(leth_sims$Estimated_truth, 2)
leth_sims2$Total_samples <- rep(leth_sims$Total_samples, 2)
leth_sims2$sex <- rep(c("F","M"), each = length(leth_sims2[,1])/2)

#head(leth_sims)
#head(leth_sims2) #Should match Nf and NfSE from leth_sims
#tail(leth_sims)
#tail(leth_sims2) #SHould match Nm and NmSE from leth_sims
colnames(leth_sims2) <- c("N", "SE", "N_guess" ,"sex", "total_samps")
#leth_sims2[length(leth_sims2[,1])/2,] #If sorted correctly, shouldbe female
#leth_sims2[(length(leth_sims2[,1])/2)+1,] #Should be male
#leth_sims2[length(leth_sims2[,1]),] #Should be male

#Number of NAs in dataset
(NAs <- length(leth_sims2[,1]) - length(leth_sims2[which(is.na(leth_sims2$N)==FALSE),1]))
leth_sims2 <- leth_sims2[which(is.na(leth_sims2$N)==FALSE),]
leth_sims <- leth_sims[which(is.na(leth_sims$Nm)==FALSE),]

####leth_sims has male and female abundances in different columns, so can group by N_guess
####leth_sims2 has sex as a factor, so can group by factor and N_guess
m_means_leth <- aggregate(Nm ~ Estimated_truth, leth_sims, mean)
m_means_leth
m_medians_leth <- aggregate(Nm ~ Estimated_truth, leth_sims, median)
m_medians_leth

f_means_leth <- aggregate(Nf ~ Estimated_truth, leth_sims, mean)
f_means_leth
f_medians_leth <- aggregate(Nf ~ Estimated_truth, leth_sims, median)
f_medians_leth

##########non-lethal##########
Lemon_100_non <- read.csv(("non_lethal/apriori_N_100/Lemon_CKMR_loop_nonlethal_aprioriN_100.csv"))
Lemon_500_non <- read.csv("non_lethal/apriori_N_500/Lemon_CKMR_loop_nonlethal_aprioriN_500.csv")
Lemon_1000_non <- read.csv("non_lethal/apriori_N_1000/Lemon_CKMR_loop_nonlethal_aprioriN_1000.csv")

head(non_sims)
non_sims <- c()
non_sims <- rbind(Lemon_100_non, Lemon_500_non, Lemon_1000_non)
non_sims$perc_sampled <- round(non_sims$Total_samples/min_adult*100,0)
non_sims$total_adults <- non_sims$Nf+non_sims$Nm
non_sims2 <- c(non_sims$Nf, non_sims$Nm)
non_sims_se <- c(non_sims$NfSE, non_sims$NmSE)
non_sims2 <- data.frame(cbind(non_sims2, non_sims_se))
non_sims2$Estimated_truth <- rep(non_sims$Estimated_truth, 2)
non_sims2$Total_samples <- rep(non_sims$Total_samples, 2)
non_sims2$sex <- rep(c("F","M"), each = length(non_sims2[,1])/2)

#head(non_sims)
#head(non_sims2) #Should match Nf and NfSE from non_sims
#tail(non_sims)
#tail(non_sims2) #SHould match Nm and NmSE from non_sims
colnames(non_sims2) <- c("N", "SE", "N_guess" ,"sex", "total_samps")
#non_sims2[length(non_sims2[,1])/2,] #If sorted correctly, shouldbe female
#non_sims2[(length(non_sims2[,1])/2)+1,] #Should be male
#non_sims2[length(non_sims2[,1]),] #Should be male

#Number of NAs in dataset
(NAs <- length(non_sims2[,1]) - length(non_sims2[which(is.na(non_sims2$N)==FALSE),1]))
non_sims2 <- non_sims2[which(is.na(non_sims2$N)==FALSE),]
non_sims <- non_sims[which(is.na(non_sims$Nm)==FALSE),]

####non_sims has male and female abundances in different columns, so can group by N_guess
####non_sims2 has sex as a factor, so can group by factor and N_guess
m_means_non <- aggregate(Nm ~ Estimated_truth, non_sims, mean)
m_means_non
m_means_non_SE <- aggregate(NmSE ~ Estimated_truth, non_sims, mean)
m_means_non_SE
m_medians_non <- aggregate(Nm ~ Estimated_truth, non_sims, median)
m_medians_non

f_means_non <- aggregate(Nf ~ Estimated_truth, non_sims, mean)
f_means_non
f_medians_non <- aggregate(Nf ~ Estimated_truth, non_sims, median)
f_medians_non
f_means_non_SE <- aggregate(NfSE ~ Estimated_truth, non_sims, mean)
f_means_non_SE
```

Plot results
```{r, echo=FALSE}
################# Plot all #################
library(ggplot2)
par(mfrow=c(2,2))
#mar - margins around each plot - default is c(5,4,4,2) - bottom, left, top, right
#oma - margins around whole window - default is c(0,0,0,0)
#To delete axes from a plot, add xaxt="n" or yaxt="n"
#mtext("text", side =1, line=3) - to add text to the outside of an individual plot
#Add the outer=T argument to mtext to add to the outside of the whole figure

####Plot lethal####
samp_levels_leth <- c(levels(factor(leth_sims$Total_samples)))
#samp_perc_levels <- round(as.numeric(c(levels(factor(leth_sims$Total_samples/total_pop*100)))), 0) #Percent of population sampled
truth_levels_leth <- as.numeric(c(levels(factor(leth_sims$Estimated_truth))))

###Plot number of males per N guess
ggplot(data=leth_sims, aes(x=factor(Estimated_truth), y=Nm)) +
  geom_boxplot() +
  geom_abline(intercept = n_fat, slope = 0, color="lightskyblue4") +
  ggtitle("CKMR Abundance Estimate for Males (Lethal sampling)") +
  xlab("Estimated Truth") +
  ylab("Calculated Abundance") #+
  geom_label(data = m_means, aes(label="Minimum fathers", x=2, y=245), fill="lightskyblue1", colour="darkslategray", fontface="bold", show.legend=NA)
  
#Label number of samples
  #geom_label(data = m_means, aes(label=c(paste0(samp_levels[1]," Samples"), paste0(samp_levels[2], " Samples"), paste0(samp_levels[3], " Samples")), x=c(1, 2, 3.0), y=c(175, 245, 140)), fill="lightskyblue1", colour="darkslategray", fontface="bold", show.legend=NA)

###Plot number of females per N guess
ggplot(data=leth_sims, aes(x=factor(Estimated_truth), y=Nf)) +
  geom_boxplot() +
  geom_abline(intercept = 23, slope = 0, color="mistyrose3") +
  ggtitle("CKMR Abundance Estimate for Females (Lethal sampling)") +
  xlab("Estimated Truth") +
  ylab("Calculated Abundance") #+
  geom_label(data = m_means, aes(label="Minimum Mothers", x=2, y=76), fill="mistyrose", colour="darkslategray", fontface="bold", show.legend=NA)

#Label number of samples
  #geom_label(data = m_means, aes(label=c(paste0(samp_levels[1]," Samples"), paste0(samp_levels[2], " Samples"), paste0(samp_levels[3], " Samples")), x=c(1, 2, 3.0), y=c(175, 245, 140)), fill="lightskyblue1", colour="darkslategray", fontface="bold", show.legend=NA)

  
####Plot non-lethal####
  head(non_sims)
samp_levels_non <- c(levels(factor(non_sims$Total_samples)))
#samp_perc_levels <- round(as.numeric(c(levels(factor(non_sims$Total_samples/total_pop*100)))), 0) #Percent of population sampled
truth_levels_non <- as.numeric(c(levels(factor(non_sims$Estimated_truth))))

###Plot number of males per N guess
ggplot(data=non_sims, aes(x=factor(Estimated_truth), y=Nm)) +
  geom_boxplot() +
  geom_abline(intercept = n_fat, slope = 0, color="lightskyblue4") +
  ggtitle("CKMR Abundance Estimate for Male Lemon Sharks") +
  xlab("Estimated Truth") +
  ylab("Calculated Abundance") +
#Label number of samples
  geom_label(data = m_means, aes(label=c(paste0(samp_levels_non[1]," Samples"), paste0(samp_levels_non[2], " Samples"), paste0(samp_levels_non[3], " Samples")), x=c(1, 2, 3.0), y=c(140, 140, 140)), fill="lightskyblue1", colour="darkslategray", fontface="bold", show.legend=NA)
  
  geom_label(data = m_means, aes(label="Minimum fathers", x=2, y=245), fill="lightskyblue1", colour="darkslategray", fontface="bold", show.legend=NA)
  
###Plot number of females per N guess
ggplot(data=non_sims, aes(x=factor(Estimated_truth), y=Nf)) +
  geom_boxplot() +
  geom_abline(intercept = 23, slope = 0, color="mistyrose3") +
  ggtitle("CKMR Abundance Estimate for Female Lemon Sharks") +
  xlab("Estimated Truth") +
  ylab("Calculated Abundance") +
  #Label number of samples
  geom_label(data = m_means, aes(label=c(paste0(samp_levels[1]," Samples"), paste0(samp_levels[2], " Samples"), paste0(samp_levels[3], " Samples")), x=c(1, 2, 3.0), y=c(40, 40, 40)), fill="lightskyblue1", colour="darkslategray", fontface="bold", show.legend=NA)
  geom_label(data = m_means, aes(label="Minimum Mothers", x=2, y=76), fill="mistyrose", colour="darkslategray", fontface="bold", show.legend=NA)
  
  
  #Plot total adults
  ggplot(data=non_sims, aes(x=factor(Estimated_truth), y=total_adults)) +
  geom_boxplot() +
  geom_abline(intercept = n_fat, slope = 0, color="lightskyblue4") +
  ggtitle("CKMR Abundance Estimate for Lemon Sharks at Bimini Bahamas") +
  xlab("Estimated Truth") +
  ylab("Calculated Abundance") +
#Label number of samples
  geom_label(data = m_means, aes(label=c(paste0(samp_levels_non[1]," Samples"), paste0(samp_levels_non[2], " Samples"), paste0(samp_levels_non[3], " Samples")), x=c(1, 2, 3.0), y=c(140, 140, 140)), fill="lightskyblue1", colour="darkslategray", fontface="bold", show.legend=NA)
```


Import data for Brav rec simulations
```{r, echo=FALSE}
setwd("../CKMR_simulations/Results/Popsize_Bravrec_tweaked_8.13.19/")

sim4 <- read.csv("Sampsize_4000.csv", header = TRUE)
sim4$N_est <- 4000
sim8 <- read.csv("Sampsize_8000.csv", header = TRUE)
sim8$N_est <- 8000
sim12 <- read.csv("Sampsize_12000.csv", header = TRUE)
sim12$N_est <- 12000
#sim1$True_Nf <- rep(4000, 100)
sim16 <- read.csv("Sampsize_16000.csv", header = TRUE)
sim16$N_est <- 16000
#sim2$True_Nf <- rep(40000, 100)
sim20 <- read.csv("Sampsize_20000.csv", header = TRUE)
sim20$N_est <- 20000
#sim3$True_Nf <- rep(400000, 100)
sim24 <- read.csv("Sampsize_24000.csv", header = TRUE)
sim24$N_est <- 24000
sim28 <- read.csv("Sampsize_28000.csv", header = TRUE)
sim28$N_est <- 28000
sim32 <- read.csv("Sampsize_32000.csv", header = TRUE)
sim32$N_est <- 32000
sim36 <- read.csv("Sampsize_36000.csv", header = TRUE)
sim36$N_est <- 36000
sim40 <- read.csv("Sampsize_40000.csv", header = TRUE)
sim40$N_est <- 40000
sim44 <- read.csv("Sampsize_44000.csv", header = TRUE)
sim44$N_est <- 44000
sim48 <- read.csv("Sampsize_48000.csv", header = TRUE)
sim48$N_est <- 48000
sim52 <- read.csv("Sampsize_52000.csv", header = TRUE)
sim52$N_est <- 52000
sim56 <- read.csv("Sampsize_56000.csv", header = TRUE)
sim56$N_est <- 56000
sim60 <- read.csv("Sampsize_60000.csv", header = TRUE)
sim60$N_est <- 60000
sim64 <- read.csv("Sampsize_64000.csv", header = TRUE)
sim64$N_est <- 64000
sim68 <- read.csv("Sampsize_68000.csv", header = TRUE)
sim68$N_est <- 68000
sim72 <- read.csv("Sampsize_72000.csv", header = TRUE)
sim72$N_est <- 72000
sim76 <- read.csv("Sampsize_76000.csv", header = TRUE)
sim76$N_est <- 76000
simHIGH <- read.csv("Sampsize_800000.csv", header = TRUE)
simHIGH$N_est <- 800000
simMIL <- read.csv("Sampsize_1mil.csv", header=TRUE)
simMIL$N_est <- 1000000

#Combine all simulations
library(data.table)
#Full list of simulations
all_sims <- rbindlist(list(sim4, sim8, sim12, sim16, sim20, sim24, sim28, sim32, sim36, sim40, sim44, sim48, sim52, sim56, sim60, sim64, sim68, sim72, sim76))
#truncated list of simulations
all_sims <- rbindlist(list(sim4, sim16, sim28, sim40, sim64, sim76, simHIGH, simMIL))
all_sims$True_Nf <- 40000
all_sims$perc_POPs <- round(all_sims$POPs_detected/(all_sims$samples_per_year*20)*100,0)
all_sims$perc_N <- all_sims$N_est/all_sims$True_Nf*100
head(all_sims)
tail(all_sims)
```

Run the below script with all data to visualize in data table all_sims
```{r, echo=FALSE}
#calculate relative bias
all_sims$rel_bias <- ((all_sims$Nf - all_sims$True_Nf)/all_sims$True_Nf)*100

## Improve graph ##
#boxplot(all_sims$rel_bias~all_sims$samples_per_year)

#sum(is.na(all_sims$Nf[all_sims$True_Nf==4e+05])==FALSE) #Number of estimates produced when population size is 400,000 out of 100 tries
#sum(is.na(all_sims$Nf[all_sims$True_Nf==4000])==FALSE) #Number of estimates produced when population size is 4,000 out of 100 tries
head(all_sims)
tail(all_sims)
View(all_sims)
all_sims$prop_sampled <- paste0(round(((all_sims$samples_per_year*20)/all_sims$True_Nf)*100,0),"%")

library(ggplot2)

ggplot(data=all_sims, aes(x=factor(N_est), y=rel_bias)) +
  geom_boxplot() +
  #geom_abline(intercept = 4000, color="red") +
  geom_abline(intercept = 0, slope = 0, color="blue") +
  #geom_abline(intercept = 400000, color="green") +
  #ggtitle(") +
  xlab("Estimated Population Size") +
  ylab("Relative Bias") #+
  geom_text(data=round(means,1), aes(label=rel_bias, y=rel_bias-40))
```


PREVIOUS USES/generic viz scripts
Abundance
========================================================
Running Bravington script in original form multiple times to see variance of estimates.

```{r, echo=FALSE, results="hide"}
#Read in simulation results
Bravtest2 <- read.csv("Braving_script_test2.csv", header = TRUE)
Bravtest3 <- read.csv("Braving_script_test3.csv", header = TRUE)
Bravtest4 <- read.csv("Braving_script_test4.csv", header = TRUE)
Bravtest <- rbind(Bravtest2, Bravtest3, Bravtest4)

Bravtest2 <- data.frame(matrix(nrow=200))
Bravtest2$Abund <- c(Bravtest$Nf, Bravtest$Nm)
Bravtest2[,1] <- NULL
Bravtest2$SE <- c(Bravtest$NfSE, Bravtest$NmSE)
Bravtest2$Sex <- c(rep("F", 100), rep("M", 100))

Bravtest2$truth=c(rep(4000, 100), rep(5000, 100))

Bravtest2$rel_bias <- ((Bravtest2$Abund - Bravtest2$truth)/Bravtest2$truth)*100

library(viridis)
library(raster)

boxplot(Bravtest2$Abund ~ Bravtest2$Sex)

library(ggplot2)

#Box plot of relative bias
##These are good 6/13/2019
ggplot(data=Bravtest2, aes(x=factor(Sex), y=Abund)) +
  geom_boxplot() +
  geom_abline(intercept = 4000, color="red") +
  geom_abline(intercept = 5000, color="blue") +
  ggtitle("Bravington script") +
  xlab("Sex") +
  ylab("Abundance")

#Plot of relative bias
plot(all_est$rel_bias ~ all_est$Sample.yrs, xlab="Sample Years", ylab="Relative bias")
abline(h=0,lwd=2, lty=2, col=4)


#code from Chris to take the mean of the relative bias for each sample size and sex
tapply(big_sim2$F_rel_bias, list(factor(big_sim2$Years), factor(big_sim2$Samples_per_yr)), mean)

```

***
```{r, echo=FALSE}
boxplot(F_rel_bias~Samples_per_yr+Years, data=big_sim2, xlab="Sample Years", ylab="Relative bias")

image(matrix(table(big_sim2$uid),nrow=10,ncol=5))

plot(as.numeric(as.character(big_sim2$Years))*as.numeric(as.character(big_sim2$Samples_per_yr)), (as.numeric(as.character(big_sim2$M_abund))-5000)/50, col=factor(big_sim2$uid))

matplot(t((tapply(as.numeric(as.character(big_sim2$F_abund)),
       list(big_sim2$Years,big_sim2$Samples_per_yr),mean,na.rm=T)-4000)/40),type="l", lty=1)

matplot((tapply(as.numeric(as.character(big_sim2$F_abund)),
       list(big_sim2$Years,big_sim2$Samples_per_yr),mean,na.rm=T)-4000)/40,type="l", lty=1)
image(tapply(big_sim2$F_abund,list(big_sim2$Years,big_sim2$Samples_per_yr),length)/100,
      col=viridis(100))

plot(raster(tapply(as.numeric(as.character(big_sim2$F_abund)),
              list(big_sim2$Years,big_sim2$Samples_per_yr),mean,na.rm=T)-4000)/40,
      col=viridis(100), axes=F)
axis(1,at = seq(0.05,0.95,0.1), labels=seq(50,500,50))
```

```{r, echo=FALSE}
#Import all simulations for population size=4000
sim1 <- read.csv("Popsize_4000.csv", header = TRUE)
sim1 <- rbind(sim1, read.csv("Popsize_40002.csv", header=TRUE))
sim1 <- rbind(sim1, read.csv("Popsize_40003.csv", header=TRUE))
sim1 <- rbind(sim1, read.csv("Popsize_40004.csv", header=TRUE))
sim1$True_Nf <- rep(4000, 100)
tail(sim1)
list.files()

#Import all simulations for population size=40000
sim2 <- read.csv("Popsize_40000.csv", header = TRUE)
sim2 <- rbind(sim2, read.csv("Popsize_400002.csv", header=TRUE))
sim2 <- rbind(sim2, read.csv("Popsize_400003.csv", header=TRUE))
sim2 <- rbind(sim2, read.csv("Popsize_400004.csv", header=TRUE))
sim2$True_Nf <- rep(40000, 100)
tail(sim2)
list.files()

#Import all simulations for population size=400,000
sim3 <- read.csv("Popsize_4e+05.csv", header = TRUE)
sim3 <- rbind(sim3, read.csv("Popsize_4e+052.csv", header=TRUE))
sim3 <- rbind(sim3, read.csv("Popsize_4e+053.csv", header=TRUE))
sim3 <- rbind(sim3, read.csv("Popsize_4e+054.csv", header=TRUE))
sim3$True_Nf <- rep(400000, 100)
tail(sim3)
list.files()

#Import all simulations for population size=4,000,000
sim4 <- read.csv("Popsize_4e+06.csv", header = TRUE)
sim4 <- rbind(sim4, read.csv("Popsize_4e+062.csv", header=TRUE))
sim4 <- rbind(sim4, read.csv("Popsize_4e+063.csv", header=TRUE))
sim4 <- rbind(sim4, read.csv("Popsize_4e+064.csv", header=TRUE))
sim4$True_Nf <- rep(4000000, 100)
tail(sim4)
list.files()

#Combine all simulations
library(data.table)
all_sims <- rbindlist(list(sim1, sim2, sim3))
head(all_sims)
head(sim3)
tail(all_sims)
```